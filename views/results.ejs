<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <title>Verification Results - EHIC Verifier</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <a href="/" class="nav-brand">EHIC Verifier</a>
            <div class="nav-menu">
                <a href="/" class="nav-link">Home</a>
                <a href="/scanner" class="nav-link">Scanner</a>
                <a href="/history" class="nav-link">History</a>
                <a href="/check-bridge" class="nav-link">Check Bridge</a>
                <a href="#" class="nav-link active">Results</a>
            </div>
        </div>
    </nav>

    <div class="breadcrumb-container">
        <nav class="breadcrumb">
            <a href="/" class="breadcrumb-item completed">
                <span class="step-number">1</span>
                Welcome
            </a>
            <span class="breadcrumb-separator">→</span>
            <a href="/treatment-date" class="breadcrumb-item completed">
                <span class="step-number">2</span>
                Treatment Date
            </a>
            <span class="breadcrumb-separator">→</span>
            <a href="/identity-check" class="breadcrumb-item completed">
                <span class="step-number">3</span>
                Identity Check
            </a>
            <span class="breadcrumb-separator">→</span>
            <a href="/scanner" class="breadcrumb-item completed">
                <span class="step-number">4</span>
                QR Verification
            </a>
            <span class="breadcrumb-separator">→</span>
            <span class="breadcrumb-item active">
                <span class="step-number">5</span>
                Results
            </span>
        </nav>
    </div>

    <main class="main-content">
        <div class="verification-container">
            <h1>Verification Results</h1>

            <div id="overall-status" class="overall-status">
                <!-- Overall status will be populated by JavaScript -->
            </div>

            <div id="loading" class="loading" style="display: block;">
                <p>Processing verification steps...</p>
            </div>

            <div id="error-container" class="error-container" style="display: none;">
                <h3>Verification Error</h3>
                <div id="error-message" class="error-message"></div>
            </div>

            <div id="verification-results" class="verification-results" style="display: none;">
                <!-- Verification steps will be populated by JavaScript -->
            </div>

            <div class="controls" style="display: none;" id="action-buttons">
                <button id="finalize-verification" class="btn btn-primary">Continue to Finalize Verification</button>
            </div>
        </div>
    </main>

    <footer class="footer">
        <p>&copy; 2024 QR Scanner App</p>
    </footer>

    <style>
        .breadcrumb-container {
            background: #fff;
            border-bottom: 1px solid #e9ecef;
            padding: 1.5rem 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        }

        .breadcrumb {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            padding: 0 2rem;
        }

        .breadcrumb-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.75rem;
            padding: 0.5rem;
            font-size: 0.85rem;
            font-weight: 500;
            transition: all 0.3s ease;
            cursor: pointer;
            text-decoration: none;
            color: #6c757d;
            min-width: 80px;
            max-width: 100px;
            text-align: center;
            line-height: 1.2;
        }

        .breadcrumb-item.active {
            color: #667eea;
        }

        .breadcrumb-item.completed {
            color: #28a745;
            cursor: pointer;
        }

        .breadcrumb-item.completed:hover {
            color: #218838;
        }

        .breadcrumb-item.disabled {
            color: #ced4da;
            cursor: default;
        }

        .breadcrumb-item .step-number {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0;
            transition: all 0.3s ease;
            border: 2px solid #ced4da;
            background: #ced4da;
        }

        .breadcrumb-item.active .step-number {
            background: #667eea;
            border-color: #667eea;
            transform: scale(1.2);
        }

        .breadcrumb-item.completed .step-number {
            background: #28a745;
            border-color: #28a745;
        }

        .breadcrumb-item.completed:hover .step-number {
            background: #218838;
            border-color: #218838;
            transform: scale(1.1);
        }

        .breadcrumb-item.disabled .step-number {
            background: #f8f9fa;
            border-color: #ced4da;
        }

        .breadcrumb-separator {
            color: #ced4da;
            font-size: 1.5rem;
            margin: 0 0.5rem;
            font-weight: bold;
        }

        .overall-status {
            text-align: center;
            padding: 2rem;
            margin-bottom: 2rem;
            border-radius: var(--border-radius);
            font-size: 1.2rem;
            font-weight: bold;
        }

        .overall-status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .overall-status.failure {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .overall-status .status-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            display: block;
        }

        .verification-results {
            background: white;
            border-radius: var(--border-radius);
            padding: 2rem;
            box-shadow: var(--box-shadow);
        }

        .verification-step-result {
            display: flex;
            align-items: center;
            padding: 1rem;
            margin-bottom: 1rem;
            background: var(--light-color);
            border-radius: var(--border-radius);
            border-left: 4px solid #ddd;
        }

        .verification-step-result.success {
            border-left-color: #28a745;
            background: rgba(40, 167, 69, 0.1);
        }

        .verification-step-result.failure {
            border-left-color: #dc3545;
            background: rgba(220, 53, 69, 0.1);
        }

        .step-icon {
            font-size: 1.5rem;
            margin-right: 1rem;
            width: 2rem;
            text-align: center;
        }

        .step-icon.success {
            color: #28a745;
        }

        .step-icon.failure {
            color: #dc3545;
        }

        .step-details {
            flex: 1;
        }

        .step-title {
            font-weight: bold;
            margin-bottom: 0.5rem;
            color: var(--dark-color);
        }

        .step-description {
            color: #666;
            font-size: 0.9rem;
        }

        .step-error {
            color: #dc3545;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        @media (max-width: 768px) {
            .breadcrumb {
                flex-wrap: wrap;
                justify-content: center;
                gap: 0.5rem;
                padding: 0 1rem;
            }

            .breadcrumb-item {
                padding: 0.3rem;
                font-size: 0.75rem;
                min-width: 60px;
                max-width: 80px;
            }

            .breadcrumb-item .step-number {
                width: 12px;
                height: 12px;
            }

            .breadcrumb-separator {
                font-size: 1.2rem;
                margin: 0 0.25rem;
            }

            .verification-step-result {
                flex-direction: column;
                align-items: flex-start;
                text-align: left;
            }

            .step-icon {
                margin-right: 0;
                margin-bottom: 0.5rem;
            }

            .overall-status .status-icon {
                font-size: 2rem;
            }
        }
    </style>

    <script>
        // Get data from sessionStorage
        const originalData = sessionStorage.getItem('verificationData');

        // Redirect back if no data
        if (!originalData) {
            window.location.href = '/scanner';
        }

        // Start verification process immediately
        processVerification();

        // Handle finalize verification button
        document.addEventListener('DOMContentLoaded', () => {
            const finalizeBtn = document.getElementById('finalize-verification');
            if (finalizeBtn) {
                finalizeBtn.addEventListener('click', () => {
                    // Navigate to the finalization page
                    window.location.href = '/finalization';
                });
            }
        });

        async function processVerification() {
            const loadingDiv = document.getElementById('loading');
            const errorContainer = document.getElementById('error-container');
            const resultsContainer = document.getElementById('verification-results');
            const overallStatus = document.getElementById('overall-status');
            const actionButtons = document.getElementById('action-buttons');

            try {
                const response = await fetch('/api/verify', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ data: originalData })
                });

                const result = await response.json();
                loadingDiv.style.display = 'none';

                if (response.ok && result.success) {
                    displayVerificationResults(result.steps);
                    actionButtons.style.display = 'block';
                } else {
                    displayError(result.error || 'Unknown error', result.message, result.step);
                    actionButtons.style.display = 'block';
                }
            } catch (error) {
                loadingDiv.style.display = 'none';
                displayError('Network Error', error.message, 'network');
                actionButtons.style.display = 'block';
            }
        }

        function displayVerificationResults(steps) {
            const resultsContainer = document.getElementById('verification-results');
            const overallStatus = document.getElementById('overall-status');

            // Create verification status object for saving
            const verificationStatus = {
                overall: true,
                steps: {
                    base45Decode: false,
                    zlibDecompression: false,
                    jwtParsing: false,
                    signatureVerification: false,
                    certificateAuthority: false
                },
                details: {}
            };

            // Process each step and update verification status
            steps.forEach(step => {
                // Check step status and update verification object
                if (step.name.includes('Original BASE45 String')) {
                    verificationStatus.steps.base45Decode = true;
                } else if (step.name.includes('Decoded BASE45')) {
                    verificationStatus.steps.base45Decode = !step.name.includes('FAILED');
                } else if (step.name.includes('Decompressed ZLIB')) {
                    verificationStatus.steps.zlibDecompression = !step.name.includes('FAILED');
                } else if (step.name.includes('Parsed JWT')) {
                    verificationStatus.steps.jwtParsing = !step.name.includes('FAILED');
                    // Extract JWT data if available
                    try {
                        const jwtData = JSON.parse(step.data);
                        verificationStatus.details.jwt = jwtData;
                    } catch (e) {
                        console.log('Could not parse JWT data');
                    }
                } else if (step.name.includes('Signature Verification Response')) {
                    try {
                        const data = JSON.parse(step.data);
                        verificationStatus.steps.certificateAuthority = !data.error;
                        verificationStatus.details.ebsiResponse = data;
                    } catch (e) {
                        verificationStatus.steps.certificateAuthority = false;
                    }
                } else if (step.name.includes('JWT Signature Validation')) {
                    try {
                        const data = JSON.parse(step.data);
                        verificationStatus.steps.signatureVerification = data.signatureValid === true;
                        verificationStatus.details.signatureValidation = data;
                    } catch (e) {
                        verificationStatus.steps.signatureVerification = false;
                    }
                }
            });

            // Determine overall success
            const allStepsSuccessful = Object.values(verificationStatus.steps).every(status => status === true);
            verificationStatus.overall = allStepsSuccessful;

            // Save verification status to sessionStorage
            sessionStorage.setItem('verificationResults', JSON.stringify(verificationStatus));

            // Display overall status
            overallStatus.className = `overall-status ${allStepsSuccessful ? 'success' : 'failure'}`;
            overallStatus.innerHTML = `
                <span class="status-icon">${allStepsSuccessful ? '✅' : '❌'}</span>
                <div>${allStepsSuccessful ? 'Verification Successful' : 'Verification Failed'}</div>
            `;

            // Display each verification step
            const stepDescriptions = {
                'Original BASE45 String': 'QR code data received successfully',
                'Decoded BASE45 (ZLIB Compressed)': 'BASE45 decoding completed',
                'Decompressed ZLIB (JWT)': 'Data decompression successful',
                'Parsed JWT (Clear Text)': 'JWT structure validation passed',
                'Signature Verification Response': 'Certificate authority lookup completed',
                'JWT Signature Validation': 'Digital signature verification completed'
            };

            steps.forEach((step, index) => {
                const stepDiv = document.createElement('div');
                const isFailed = step.name.includes('FAILED');
                let isSuccess = !isFailed;

                // Special handling for specific steps
                if (step.name.includes('Signature Verification Response')) {
                    try {
                        const data = JSON.parse(step.data);
                        isSuccess = !data.error;
                    } catch (e) {
                        isSuccess = true;
                    }
                } else if (step.name.includes('JWT Signature Validation')) {
                    try {
                        const data = JSON.parse(step.data);
                        isSuccess = data.signatureValid === true;
                    } catch (e) {
                        isSuccess = false;
                    }
                }

                stepDiv.className = `verification-step-result ${isSuccess ? 'success' : 'failure'}`;

                const baseStepName = step.name.replace(' (FAILED)', '');
                const description = stepDescriptions[baseStepName] || 'Processing step completed';

                let errorMessage = '';
                if (!isSuccess) {
                    if (step.name.includes('FAILED')) {
                        try {
                            const data = JSON.parse(step.data);
                            errorMessage = `<div class="step-error">Error: ${data.error || 'Unknown error'}</div>`;
                        } catch (e) {
                            errorMessage = '<div class="step-error">Step failed</div>';
                        }
                    } else if (step.name.includes('Signature Verification Response')) {
                        try {
                            const data = JSON.parse(step.data);
                            if (data.error) {
                                errorMessage = `<div class="step-error">Error: ${data.message || data.error}</div>`;
                            }
                        } catch (e) {
                            errorMessage = '<div class="step-error">Response parsing failed</div>';
                        }
                    } else if (step.name.includes('JWT Signature Validation')) {
                        try {
                            const data = JSON.parse(step.data);
                            if (!data.signatureValid) {
                                errorMessage = `<div class="step-error">Signature validation failed: ${data.error || 'Invalid signature'}</div>`;
                            }
                        } catch (e) {
                            errorMessage = '<div class="step-error">Signature validation failed</div>';
                        }
                    }
                }

                stepDiv.innerHTML = `
                    <div class="step-icon ${isSuccess ? 'success' : 'failure'}">
                        ${isSuccess ? '✅' : '❌'}
                    </div>
                    <div class="step-details">
                        <div class="step-title">Step ${index + 1}: ${baseStepName}</div>
                        <div class="step-description">${description}</div>
                        ${errorMessage}
                    </div>
                `;

                resultsContainer.appendChild(stepDiv);
            });

            resultsContainer.style.display = 'block';
        }

        function displayError(error, message, step) {
            const errorContainer = document.getElementById('error-container');
            const errorMessage = document.getElementById('error-message');
            const overallStatus = document.getElementById('overall-status');

            // Display overall failure status
            overallStatus.className = 'overall-status failure';
            overallStatus.innerHTML = `
                <span class="status-icon">❌</span>
                <div>Verification Failed</div>
            `;

            errorMessage.innerHTML = `
                <p><strong>Error:</strong> ${error}</p>
                <p><strong>Message:</strong> ${message}</p>
                <p><strong>Failed at:</strong> ${step}</p>
            `;

            errorContainer.style.display = 'block';
        }
    </script>
</body>
</html>